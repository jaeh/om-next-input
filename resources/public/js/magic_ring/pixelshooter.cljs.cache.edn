;; Analyzed by ClojureScript 1.7.145
{:use-macros {html sablono.core, defui om.next}, :excludes #{}, :name magic-ring.pixelshooter, :imports nil, :requires {gdom goog.dom, goog.dom goog.dom, om om.next, om.next om.next, html sablono.core, sablono.core sablono.core, app magic-ring.appstate, magic-ring.appstate magic-ring.appstate}, :uses nil, :defs {read {:protocol-inline nil, :meta {:file "/home/j/clojure/om-next/src/magic_ring/pixelshooter.cljs", :line 7, :column 7, :end-line 7, :end-column 11, :arglists (quote ([{:keys [app/state], :as env} key params]))}, :name magic-ring.pixelshooter/read, :variadic false, :file "src/magic_ring/pixelshooter.cljs", :end-column 11, :method-params ([p__22927 key params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{:keys [app/state], :as env} key params]))}, mutate {:protocol-inline nil, :meta {:file "/home/j/clojure/om-next/src/magic_ring/pixelshooter.cljs", :line 13, :column 7, :end-line 13, :end-column 13, :arglists (quote ([{:keys [app/state], :as env} key params]))}, :name magic-ring.pixelshooter/mutate, :variadic false, :file "src/magic_ring/pixelshooter.cljs", :end-column 13, :method-params ([p__22934 key params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 3, :fn-var true, :arglists (quote ([{:keys [app/state], :as env} key params]))}, component {:protocol-inline nil, :meta {:jsdoc ["@constructor"], :arglists (quote ([])), :file nil}, :name magic-ring.pixelshooter/component, :variadic false, :file "src/magic_ring/pixelshooter.cljs", :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :jsdoc ["@constructor"]}, reconciler {:name magic-ring.pixelshooter/reconciler, :file "src/magic_ring/pixelshooter.cljs", :line 34, :column 1, :end-line 34, :end-column 16, :meta {:file "/home/j/clojure/om-next/src/magic_ring/pixelshooter.cljs", :line 34, :column 6, :end-line 34, :end-column 16}}}, :require-macros {om om.next, om.next om.next, html sablono.core, sablono.core sablono.core}, :cljs.analyzer/constants {:seen #{:read :om.next/queries :config :value increment :state :app/state :parser :not-found :indexer :count :action :mutate}, :order [:app/state :value :not-found increment :action :count :config :state :indexer :om.next/queries :parser :read :mutate]}, :doc nil}